openapi: "3.0.0"
info:
  description: "This is a Media catalog server."
  version: "1.0.0"
  title: "Swagger Media Catalog"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "mnsrulz"
  license:
    name: "MIT"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://localhost:3000
    description: local
  - url: https://mediacatalog.netlify.app/.netlify/functions/server
    description: production
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
tags:
- name: "playlist"
  description: "Manages playlist"  
- name: "mediaitems"
  description: "Access to Media Items"
security:
  - basicAuth: []
paths:
  /playlists:
    get:
      tags:
      - "playlist"
      produces:
        - "application/json"      
      responses:
        "200":          
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Playlist"
    post:
      tags:
      - "playlist"
      summary: "Add a new playlist"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Playlist object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        "405":
          description: "Invalid input"
  /playlists/{playlistId}:
    get:
      tags:
      - "playlist"
      summary: "Find playlist by ID"
      description: "Fetches the playlist object by Id"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
    delete:
      tags:
      - "playlist"
      summary: "Delete Playlist by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of the Playlist that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /playlists/{playlistId}/items:
    get:
      tags:
      - "playlist"
      summary: "List items in the playlist"
      description: "Fetches the playlist object by Id"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /playlists/{playlistId}/items/{mediaItemId}:
    put:
      tags:
      - "playlist"
      summary: "Add item in the playlist"
      description: "Add item in the playlist"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      - name: "mediaItemId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
    delete:
      tags:
      - "playlist"
      summary: "Removes item from the playlist"
      description: "Removes item from the playlist"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      - name: "mediaItemId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /items:
    get:
      tags:
      - "mediaitems"
      produces:
        - "application/json"        
      security:
        - basicAuth: []
      responses:
        "200":          
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MediaItem"
    post:
      tags:
      - "mediaitems"
      summary: "Add a new media item"
      description: ""      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Media item object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CreateMediaItemCommand"
      responses:
        "201":          
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                description: "Id of the created media item"
        "405":
          description: "Invalid input"
  /items/{mediaItemId}:
    get:
      tags:
      - "mediaitems"
      summary: "Retrieves a media item"
      description: ""      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item"
        required: true
        type: "string"      
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MediaItem"
        "405":
          description: "Invalid input"      
    delete:
      tags:
      - "mediaitems"
      summary: "Deletes a media item"
      description: ""      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item"
        required: true
        type: "string"      
      responses:
        "204":
          description: "successful operation"      
        "404":
          description: "Media Item Id not found"      
  /items/{mediaItemId}/externalIds/{externalId}:
    put:
      tags:
      - "mediaitems"
      summary: "Assign the external id to the media item"
      description: "Assign the external id to the media item"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item"
        required: true
        type: "string"
      - name: "externalId"
        in: "path"
        description: "External Id to attach"
        required: true
        type: "string"
      - name: "type"
        in: "query"        
        type: "string"
        enum:
        - "imdb"
        - "tvdb"
        - "tmdb"
      responses:
        "200":
          description: "successful operation"          
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/externalIds:
    delete:
      tags:
      - "mediaitems"
      summary: "Removes the external id from the media item"
      description: "Removes the external id from the media item"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item"
        required: true
        type: "string"
      - name: "type"
        in: "query"        
        type: "string"
        enum:
        - "imdb"
        - "tvdb"
        - "tmdb"
      responses:
        "204":
          description: "successful operation"          
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/playlists/{playlistId}:
    put:
      tags:
      - "mediaitems"
      summary: "Assign the Playlist to the media item"
      description: "Assign the Playlist to the media item"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item that needs to be added in the playlist"
        required: true
        type: "string"
      - name: "type"
        in: "body"
        schema:
          $ref: "#/definitions/AssignPlaylistToMediaRequest"        
      responses:
        "200":
          description: "successful operation"          
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
    delete:
      tags:
      - "mediaitems"
      summary: "Removes the media item from the Playlist"
      description: "Removes the media item from the Playlist"
      produces:
      - "application/json"
      parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item that needs to be removed from the playlist"
        required: true
        type: "string"
      - name: "playlistId"
        in: "path"
        description: "ID of media item that needs to be removed from the playlist"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"          
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /items/byExternalId/{externalId}:   
    get:
      tags:
      - "mediaitems"
      summary: "Fetch a media item by external Id"
      description: ""      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "externalId"
        in: "path"
        description: "External Id"
        required: true
        type: "string"
      - name: "type"
        in: "query"        
        type: "string"
        enum:
        - "imdb"
        - "tvdb"
        - "tmdb"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MediaItem"        
        "405":
          description: "Invalid input"
    post:
      tags:
      - "mediaitems"
      summary: "Add a new media item by external Id"
      description: ""      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "externalId"
        in: "path"
        description: "External Id"
        required: true
        type: "string"
      - name: "type"
        in: "query"        
        type: "string"
        enum:
        - "imdb"
        - "tvdb"
        - "tmdb"
      responses:
        "201":          
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                description: "Id of the created media item"
        "405":
          description: "Invalid input"
securityDefinitions:  
  basicAuth:
    type: "basic"    
definitions:
  Playlist:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
  MediaItem:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      year:
        type: "string"
      externalIds:
        type: "array"
        items:
          $ref: '#/definitions/ExternalId'
      playlistIds:
        type: "array"
        items:
          type: "string"
  CreateMediaItemCommand:
    type: "object"
    properties:
      title:
        required: true
        type: "string"
      year:
        required: true
        type: "string"      
      itemType:
        type: "string"
        required: true
        enum:
        - "movie"
        - "tv"        
  ExternalId:
    type: "object"
    properties:
      id:
        type: "string"        
      type:
        type: "string"
        description: "Type of External Id"
        required: true
        enum:
        - "imdb"
        - "tvdb"
        - "other"
  AssignExternalIdRequest:
    type: "object"
    properties:
      id:
        type: "string"        
      type:
        type: "string"
        description: "Type of External Id"
        required: true
        enum:
        - "imdb"
        - "tvdb"
        - "other"
  AssignMediaToPlaylistRequest:
    type: "object"
    properties:
      mediaItemId:
        type: "string"
  AssignPlaylistToMediaRequest:
    type: "object"
    properties:
      playlistId:
        type: "string"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"      
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"