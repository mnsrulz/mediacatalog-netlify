openapi: "3.0.0"
info:
  description: "This is a Media catalog server."
  version: "1.0.0"
  title: "Swagger Media Catalog"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "manishrawat4u@gmail.com"
  license:
    name: "MIT"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://localhost:3000
    description: local
  - url: https://mediacatalog.netlify.app/.netlify/functions/server
    description: production
tags:
  - name: "playlist"
    description: "Manages playlist"
  - name: "mediaitems"
    description: "Access to Media Items"
security:
  - basicAuth: []
  - bearerAuth: []
paths:
  /playlists:
    get:
      tags:
        - "playlist"
      parameters:
        - in: "query"
          name: "includeSystemDefined"
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Playlist"
    post:
      tags:
        - "playlist"
      summary: "Add a new playlist"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        "201":
          description: Created
        "400":
          description: "Invalid input"
  /playlists/{playlistId}:
    get:
      tags:
        - "playlist"
      summary: "Find playlist by ID"
      parameters:
        - in: "path"
          name: "playlistId"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
    delete:
      tags:
        - "playlist"
      summary: "Delete Playlist by ID"
      parameters:
        - name: "playlistId"
          in: "path"
          description: "ID of the Playlist that needs to be deleted"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Playlist not found"
  /playlists/hdhub/items:
    get:
      tags:
        - "Playlist Media Items"
      parameters:
        - name: "pageSize"
          in: "query"
          schema:
            type: "number"
      summary: "List items in the playlist"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /playlists/extramovies/items:
    get:
      tags:
        - "Playlist Media Items"
      parameters:
        - name: "pageSize"
          in: "query"
          schema:
            type: "number"            
      summary: "List items in the playlist"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /playlists/{playlistId}/items:
    get:
      tags:
        - "Playlist Media Items"
      summary: "List items in the playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /playlists/{playlistId}/items/{mediaItemId}:
    put:
      tags:
        - "Playlist Media Items"
      summary: "Add item in the playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: "string"
        - name: "mediaItemId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
    delete:
      tags:
        - "Playlist Media Items"
      summary: "Removes item from the playlist"
      parameters:
        - name: "playlistId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: "string"
        - name: "mediaItemId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Playlist not found"
  /items:
    get:
      tags:
        - "mediaitems"
      parameters:
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "movie"
              - "tv"
        - name: "q"
          in: "query"
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MediaItem"
    post:
      tags:
        - "mediaitems"
      summary: "Add a new media item"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMediaItemCommand"
      responses:
        "201":
          description: Created
        "400":
          description: "Invalid input"
  /items/{mediaItemId}:
    get:
      tags:
        - "mediaitems"
      summary: "Retrieves a media item"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaItem"
    delete:
      tags:
        - "mediaitems"
      summary: "Deletes a media item"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "successful operation"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/mediasources:
    get:
      tags:
        - "Media Source"
        - "mediaitems"
      summary: "Retrieves media sources of given media item"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
  /items/{mediaItemId}/favorite:
    put:
      tags:
        - "mediaitems"
      summary: "Marks media item as favorite"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "successful operation"
        "404":
          description: "Media Item Id not found"
    delete:
      tags:
        - "mediaitems"
      summary: "Removes media item from favorite list"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "successful operation"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/externalIds/{externalId}:
    put:
      tags:
        - "mediaitems"
      summary: "Assign the external id to the media item"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
        - name: "externalId"
          in: "path"
          description: "External Id to attach"
          required: true
          schema:
            type: "string"
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "imdb"
              - "tvdb"
              - "tmdb"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/externalIds:
    delete:
      tags:
        - "mediaitems"
      summary: "Removes the external id from the media item"
      parameters:
        - name: "mediaItemId"
          in: "path"
          description: "ID of media item"
          required: true
          schema:
            type: "string"
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "imdb"
              - "tvdb"
              - "tmdb"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /items/{mediaItemId}/playlists/{playlistId}:
    parameters:
      - name: "mediaItemId"
        in: "path"
        description: "ID of media item that needs to be added in the playlist"
        required: true
        schema:
          type: "string"
      - name: "playlistId"
        in: "path"
        description: "Playlist Id"
        required: true
        schema:
          type: "string"
    put:
      tags:
        - "Playlist Media Items"
      summary: "Assign the Playlist to the media item"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignPlaylistToMediaRequest"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
    delete:
      tags:
        - "Playlist Media Items"
      summary: "Removes the media item from the Playlist"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "Media Item Id not found"
  /items/byExternalId/{externalId}:
    parameters:
      - name: "externalId"
        in: "path"
        description: "External Id"
        required: true
        schema:
          type: "string"
    get:
      tags:
        - "mediaitems"
      summary: "Fetch a media item by external Id"
      parameters:
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "imdb"
              - "tvdb"
              - "tmdb"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaItem"
        "405":
          description: "Invalid input"
    post:
      tags:
        - "mediaitems"
      summary: "Add a new media item by external Id"
      parameters:
        - name: "type"
          in: "query"
          schema:
            type: "string"
            enum:
              - "imdb"
              - "tvdb"
              - "tmdb"
        - name: "tmdbHint"
          in: "query"
          schema:
            type: "string"
            enum:
              - "movie"
              - "tv"
      responses:
        "201":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    description: "Id of the created media item"
        "400":
          description: "Invalid input"
  /remoteUrlUploadRequest:
    get:
      tags:
        - "Remote Url Upload"
      summary: "List all the requests"
      parameters:
        - name: "status"
          description: "Pass in a value if filtering is needed"
          in: "query"
          schema:
            type: "string"
            enum:
              - "queued"
              - "running"
              - "completed"
              - "error"
        - name: "requestId"
          description: "Pass in the request id"
          in: "query"
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteUrlRequest"
    post:
      tags:
        - "Remote Url Upload"
      summary: "Create a new remote url upload request"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRemoteUrlRequestCommand"
      responses:
        "201":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    description: "Id of the created media item"
        "405":
          description: "Invalid input"
  /remoteUrlUploadRequest/{remoteUploadRequestId}:
    parameters:
      - in: "path"
        name: "remoteUploadRequestId"
        required: true
        schema:
          type: string
    get:
      tags:
        - "Remote Url Upload"
      summary: "Get specific request"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/RemoteUrlRequest"
  /remoteUrlUploadRequest/{remoteUploadRequestId}/start:
      parameters:
      - in: "path"
        name: "remoteUploadRequestId"
        required: true
        schema:
          type: string
      post:
        tags:
          - "Remote Url Upload"
        summary: "Create a new remote url upload request"
        responses:
          "204":
            description: "successful operation"
  /remoteUrlUploadRequest/{remoteUploadRequestId}/complete:
      parameters:
      - in: "path"
        name: "remoteUploadRequestId"
        required: true
        schema:
          type: string
      post:
        tags:
          - "Remote Url Upload"
        summary: "Create a new remote url upload request"
        responses:
          "204":
            description: "successful operation"
  /remoteUrlUploadRequest/{remoteUploadRequestId}/error:
      parameters:
      - in: "path"
        name: "remoteUploadRequestId"
        required: true
        schema:
          type: string
      post:
        tags:
          - "Remote Url Upload"
        summary: "Create a new remote url upload request"
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        responses:
          "204":
            description: "successful operation"
  /remoteUrlUploadRequest/{remoteUploadRequestId}/progress:
      parameters:
      - in: "path"
        name: "remoteUploadRequestId"
        required: true
        schema:
          type: string
      post:
        tags:
          - "Remote Url Upload"
        summary: "Create a new remote url upload request"
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  size: 
                    type: number
                  uploaded: 
                    type: number
        responses:
          "204":
            description: "successful operation"
  /crawler/hdhub:
    get:
      tags:
        - "Crawlers"
      summary: "Gets the latest entry of this crawler"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
        - "Crawlers"
      summary: "Crawl Hdhub"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  count:
                    type: "string"
                    description: "Number of objects created"
  /crawler/extramovies:
    get:
      tags:
        - "Crawlers"
      summary: "Gets the latest entry of this crawler"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
        - "Crawlers"
      summary: "Crawl extramovies"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  count:
                    type: "string"
                    description: "Number of objects created"
  /mediasources:
    get:
      tags:
        - "Media Source"
      parameters:
        - name: "pageSize"
          in: "query"
          schema:
            type: "number"            
        - name: "pageNumber"
          in: "query"
          schema:
            type: "number"            
        - name: "q"
          in: "query"
          schema:
            type: "string"
        - name: "parsedTitle"
          in: "query"
          description: "use to find other related media items whose parsed title matches with this one"
          schema:
            type: "string"
        - name: "onlyPendingMediaAssignment"
          in: "query"
          schema:
            type: "boolean"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
  /mediasources/{mediaSourceId}:
    get:
      tags:
        - "Media Source"
      summary: "Retrieves a media item"
      parameters:
        - name: "mediaSourceId"
          in: "path"
          description: "ID of media source"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
  /mediasources/{mediaSourceId}/mediaItemId/{mediaItemId}:
    parameters:
      - name: "mediaSourceId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "mediaItemId"
        in: "path"
        description: "Media Item Id"
        required: true
        schema:
          type: "string"
    put:
      tags:
        - "Media Source"
      summary: "Assign the media item id to the media source"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
    delete:
      tags:
        - "Media Source"
      summary: "Removes the media item id from the media source"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
  /mediasources/{mediaSourceId}/byExternalId/{externalId}:
    parameters:
      - name: "mediaSourceId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "externalId"
        in: "path"
        description: "External Id"
        required: true
        schema:
          type: "string"
      - name: "type"
        in: "query"
        schema:
          type: "string"
          enum:
            - "imdb"
            - "tvdb"
            - "tmdb"
    put:
      tags:
        - "Media Source"
      summary: "Assign the media item id to the media source"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Media Item Id not found"
components:
  securitySchemes:
    basicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    Playlist:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
    MediaItem:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        year:
          type: "string"
        externalIds:
          type: "array"
          items:
            $ref: "#/components/schemas/ExternalId"
        playlistIds:
          type: "array"
          items:
            type: "string"
    CreateMediaItemCommand:
      type: "object"
      properties:
        title:
          type: "string"
        year:
          type: "string"
        itemType:
          type: "string"
          enum:
            - "movie"
            - "tv"
    ExternalId:
      type: "object"
      properties:
        id:
          type: "string"
        type:
          type: "string"
          description: "Type of External Id"
          enum:
            - "imdb"
            - "tvdb"
            - "other"
    AssignPlaylistToMediaRequest:
      type: "object"
      properties:
        playlistId:
          type: "string"
    RemoteUrlRequest:
      type: "object"
      properties:
        requestId:
          type: "string"
        fileUrl:
          type: "string"
        files:
          type: "array"
          items:
            type: "string"
        status:
          type: "string"
          enum:
            - "queued"
            - "running"
            - "completed"
            - "error"
        message:
          type: "string"
    CreateRemoteUrlRequestCommand:
      type: "object"
      properties:
        fileUrl:
          type: "string"
        accessToken:
          type: "string"
        parentUrl:
          type: "string"
        title:
          type: "string"
        year:
          type: "string"
        mediaType:
          type: "string"
        rawUpload:
          type: "boolean"
        files:
          type: "array"
          items:
            type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
